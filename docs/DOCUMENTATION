### Architecture
The tech stack I chose is node(api), react(fe), sqlite(db), docker(dev setup), nx(monorepo)

### Design Decision
I chose nodejs with express for backend based on the guidelines and I find it would be consistent to have it all typescript as the language in both backend and frontend. I use the nx monorepo in synergy with docker to run automated tasks like migration, seeder, lint. In my development as well to generate the components, linting and to have a shared node module packages. I decided to use SQLite because it would be easier for me to start making the app because of less configuration, DB relational showcase, demo purposes and it also work well with PRISMA ORM. I also needed to make sure I have docker setup because I was switching from my mac mini and laptop to ensure consistent development setup. I have to make sure that this can be run easily and conveniently and later it can be easily extended for multi stage environment such as staging and production.  

For frontend development decision, I have decided to just implement the client facing app such as login, register, book browse, search and view details.

For backend development, I have created CRUD operations using API only and added a seeder to pregenerate sample books. I am thinking that the CRUD operation for managing the books can have a separate ADMIN UI page/separate app to manage the records(which can be done later).

### Related files
In this repository all the related files while I was building this app can be seen in PLAN, REFERENCES, DOCUMENTATION and README.md.

### DB Schema
This DB schema can found under apps/bookstore-api/prisma/schema.prisma

### Challenges that I have overcome
1. Docker compose, nx setup
2. type issues with nodejs for packages such as bcrypt, jsonwebtokens an open issue in Github
3. docker, nx shared library relative import
4. cross origin resource fe and api integration(common)
5. prisma client, nx issue(configuration necessary)
6. nx daemon process become zombie during development when not gracefully `docker compose down`
7. docker compose up fails in first run
8. limited time due to personal circumstances

### Enhancement that be can done in the next phase
1. convert global state such as books and favorites into RTK toolkit/zustand/redux-saga
    for optimized react tree component renders, it will also avoid books page code bloat
    NOTE: I use hooks for now to make it simple with prop drillings like books page into book grid
2. nodejs api file structure - services, api, models, routes, controllers can be group per resource in a single folder
3. UI menu items restructure
4. books data can be saved in memory db for fast response like(redis, mongodb)
5. test coverage 100%
6. DB persistence on for production environment or should be a separate service
7. Docker multi environment setup